
#include <RedBot.h>

RedBotSensor left_sen = RedBotSensor(A8);

RedBotSensor right_sen = RedBotSensor(A5);

//*****************************************++MOTORES++*************************************

//motor esquerdo
#define en1 9
#define in1 8
#define in2 7
//motor direito
#define en2 5
#define in3 4
#define in4 3

//******************************************************************************************



//*****************************++VALORES PARA O SEGUE-LINHA++*******************************

int lineStandard = 200; // valor no qual os sensores irão detectar a cor PRETA

int vvm = 150; //vvm = valor verde mínimo, valor mínimo que os sensores detectam a cor VERDE
int vvM = 400; //vvM = valor verde Máximo, valor máximo que os sensores detectam a cor VERDE
int branco = 100; // valor máximo da cor BRANCA

//******************************************************************************************




void setup()
{ pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(en1, OUTPUT);
  pinMode(en2, OUTPUT);
  Serial.begin(9600);
  Serial.println("IR Sensor Readings:: ");
  delay(1000);

  
}

void loop()
{
  Serial.print(left_sen.read());
  Serial.print("\t");

  Serial.print(right_sen.read());
  Serial.println();


  //data_sheet

  forward();

  if (left_sen.read() < branco)
  {
    if (right_sen.read() < branco)
    {//linha reta
      forward();
      right_sen.read();
      left_sen.read();
    }

    else
    {//somente o sensor DIREITO está detectando o preto
      do{
        left();
        right_sen.read();
        left_sen.read(); 
      } 
      while (right_sen.read() > lineStandard);
    }
  }
  else{
    if (right_sen.read() < branco) {
      if (left_sen.read() < branco){
        //ambos detectaram PRETO
        forward();
      }
      else
      {//somente o sensor ESQUERDO está detectando o preto
        do{
          right();
          right_sen.read();
          left_sen.read();
        }
        while (left_sen.read() >lineStandard);
      }
    }
  }
  delay(0);
}


void right() {
  analogWrite(en1, 80);
  analogWrite(en2, 80);
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
}
void Stop () {
  analogWrite(en1, 0);
  analogWrite(en2, 0);
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
}
void left() {
  analogWrite(en1, 80);
  analogWrite(en2, 80);
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
}
void forward() {
  analogWrite(en1, 80);
  analogWrite(en2, 80);
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
}
void back() {

  analogWrite(en1, 80);
  analogWrite(en2, 80);
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
}
